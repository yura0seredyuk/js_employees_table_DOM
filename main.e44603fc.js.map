{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","thead","tbody","sortedEmployee","targetTitle","position","cellIndex","tableRows","children","innerText","toLowerCase","sort","prev","next","firstElement","secondElement","localeCompare","regexp","RegExp","replace","firstElementChild","forEach","title","dataset","clickedTitle","previousActiveRow","appendSortedEmployee","clickEvent","target","closest","append","reverse","addEventListener","currentRow","classList","remove","add","insertAdjacentHTML","form","inputs","querySelectorAll","addNewEmployee","preventDefault","formData","FormData","newEmployeeData","Object","fromEntries","entries","name","length","age","office","Number","salary","toLocaleString","pushNotification","input","value","minNameLength","minAge","maxAge","posTop","posRight","description","type","notification","createElement","titleText","messageText","qa","style","top","right","textContent","setTimeout"],"mappings":"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","file":"main.e44603fc.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// write code here\nconst body = document.querySelector('body');\nconst thead = document.querySelector('thead');\nconst tbody = document.querySelector('tbody');\n\n[...thead.firstElementChild.children].forEach(title => {\n  title.dataset.clickedTitle = false;\n});\n\nfunction sortedEmployee(targetTitle) {\n  const position = targetTitle.cellIndex;\n  const tableRows = [...tbody.children];\n\n  switch (targetTitle.innerText.toLowerCase()) {\n    case 'name':\n    case 'position':\n    case 'office':\n      tableRows.sort((prev, next) => {\n        const firstElement = prev.children[position].innerText;\n        const secondElement = next.children[position].innerText;\n\n        return firstElement.localeCompare(secondElement);\n      });\n      break;\n\n    case 'salary':\n    case 'age':\n      tableRows.sort((prev, next) => {\n        let firstElement = prev.children[position].innerText;\n        let secondElement = next.children[position].innerText;\n        const regexp = new RegExp(/[^0-9]/g);\n\n        firstElement = firstElement.replace(regexp, '');\n        secondElement = secondElement.replace(regexp, '');\n\n        return firstElement - secondElement;\n      });\n      break;\n  }\n\n  return tableRows;\n}\n\nconst appendSortedEmployee = clickEvent => {\n  const title = clickEvent.target.closest('th');\n\n  if (title.dataset.clickedTitle === 'false') {\n    tbody.append(...sortedEmployee(title));\n    title.dataset.clickedTitle = true;\n  } else {\n    tbody.append(...sortedEmployee(title).reverse());\n    title.dataset.clickedTitle = false;\n  }\n};\n\nthead.addEventListener('click', appendSortedEmployee);\n\nlet previousActiveRow;\n\ntbody.addEventListener('click', (clickEvent) => {\n  const currentRow = clickEvent.target.closest('tr');\n\n  if (previousActiveRow) {\n    previousActiveRow.classList.remove('active');\n  }\n\n  previousActiveRow = currentRow;\n  currentRow.classList.add('active');\n});\n\nbody.insertAdjacentHTML('beforeend', `\n  <form class=\"new-employee-form\">\n    <label>Name:\n    <input\n      name=\"name\"\n      data-qa=\"name\"\n      type=\"text\"\n      required\n    >\n    </label>\n    <label>Position:\n      <input\n        name=\"position\"\n        data-qa=\"position\"\n        type=\"text\"\n      >\n    </label>\n    <label>Office:\n      <select\n        name=\"office\"\n        data-qa=\"office\"\n        required\n      >\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n    <label>Age:\n      <input\n        name=\"age\"\n        data-qa=\"age\"\n        type=\"number\"\n        required\n      >\n    </label>\n    <label>Salary:\n      <input\n        name=\"salary\"\n        data-qa=\"salary\"\n        type=\"number\"\n        required\n      >\n    </label>\n    <button>\n      Save to table\n    </button>\n  </form>\n`);\n\nconst form = document.querySelector('.new-employee-form');\nconst inputs = form.querySelectorAll('input');\n\nform.addEventListener('submit', addNewEmployee);\n\nfunction addNewEmployee(clickEvent) {\n  clickEvent.preventDefault();\n\n  const formData = new FormData(form);\n  const newEmployeeData = Object.fromEntries(formData.entries());\n\n  const minAge = 18;\n  const maxAge = 90;\n  const minNameLength = 4;\n\n  if (newEmployeeData.name.length >= minNameLength\n    && newEmployeeData.age >= minAge\n    && newEmployeeData.age <= maxAge\n    && newEmployeeData.position.length) {\n    tbody.insertAdjacentHTML('beforeend', `\n      <tr>\n        <td>${newEmployeeData.name}</td>\n        <td>${newEmployeeData.position}</td>\n        <td>${newEmployeeData.office}</td>\n        <td>${newEmployeeData.age}</td>\n        <td>$${Number(newEmployeeData.salary).toLocaleString('en')}</td>\n      </tr>\n  `);\n\n    pushNotification(30, 10, 'Succsess',\n      'Add new employee', 'success');\n\n    [...inputs].forEach(input => {\n      input.value = '';\n    });\n  }\n\n  if (newEmployeeData.name.length < minNameLength) {\n    return pushNotification(30, 10, 'Error',\n      `Name length must be more than ${minNameLength} charecters`, 'error');\n  }\n\n  if (!newEmployeeData.position.length) {\n    return pushNotification(370, 10, 'Error',\n      'Should contain correct position', 'error');\n  }\n\n  if (newEmployeeData.age < minAge || newEmployeeData.age > maxAge) {\n    return pushNotification(200, 10, 'Error',\n      `Age must be more than ${minAge} and less than ${maxAge}`, 'error');\n  }\n}\n\nconst pushNotification = (posTop, posRight, title, description, type) => {\n  const notification = document.createElement('div');\n  const titleText = document.createElement('h2');\n  const messageText = document.createElement('p');\n\n  notification.dataset.qa = 'notification';\n  notification.classList.add('notification', type);\n  notification.style.top = posTop + 'px';\n  notification.style.right = posRight + 'px';\n\n  titleText.classList.add('title');\n  titleText.textContent = `${title}`;\n\n  messageText.textContent = `${description}`;\n\n  body.append(notification);\n  notification.append(titleText, messageText);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 4000);\n};\n"]}